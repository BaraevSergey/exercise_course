1. Что такое TypeScript? В чем разница между TS и JS?
typeScript - типизированный JS, разница в том что в TS - есть типы элементов) 
2. Как скомпилировать TS в JS?
С помощью ноды можно компилить ts в js
3. Какие есть типы в TS? Приведите пример использования по каждому типу.

boolean: логическое значение true или false
let bool: boolean = true

number: числовое значение
let num: number = 1

string: строки
let str: string = '123'

Array: массивы
let arr: number[] = [1,1]

Tuple: кортежи
let tup: [string, number] = ['123',3]

Enum: перечисления
enum enumber {1,2,3,4}

Any: произвольный тип
let any_var: any = '123'

null и undefined: соответствуют значениям null и undefined в javascript

Never: также представляет отсутствие значения и используется в качестве возвращаемого типа функций, которые генерируют или возвращают ошибку

4. Что такое type и interface? В чем разница между ними? Приведите примеры использования.
Интерфейсы имеют больше возможностей, могут объединяться по названиям, члены интерфейса реализуются классами

5. Что такое generic? Для чего он нужен? Приведите пример использования
generic - обобщённый тип
проще показать,есть функция 

function identity(arg: any): any {
	return arg;
}
как видно она возвращает принимаемый аргумент, но для данной функции применимо, что функция теоретически может принять например int а вернуть string (оно же подходит под any)
Поэтому чтобы точно показать, что функция возвращает тот тип который и принимает можно использовать обобщённый тип


function identity<T>(arg: T): T {
	return arg;
}

Для данной ситуации уже не валидно, что функция приняла int а вернула string, так как мы показываем что что мы взяли, то и возвращаем